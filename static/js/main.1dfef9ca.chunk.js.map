{"version":3,"sources":["hooks/useTxtStyles.js","Themes/buttTheme.js","components/Ticker.js","components/Display.js","hooks/useIsFirstRender.js","App.js","index.js"],"names":["useStyles","makeStyles","digital","fontFamily","fontSize","color","margin","label","marginBottom","buttTheme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","Ticker","props","txtClasses","useTxtStyles","Box","align","ThemeProvider","theme","Typography","id","className","IconButton","onClick","handleInc","value","handleDec","butt","time","position","height","width","inactive","display","pulser1","left","right","top","marginLeft","marginRight","animation","pulser2","pulser3","shifter","Display","classes","isSesh","isPause","rawVal","Button","handleTimerAction","variant","disableElevation","handleReset","useIsFirstRender","r","useRef","useEffect","current","App","useState","seshVal","setSeshVal","breakVal","setBreakVal","setIsSesh","curr","setCurr","audio","isFR","expTimeLapse","nextUp","timeItems","updateTimeItems","timeRef","setTimeRef","timeChange","handleSInc","handleSDec","handleBInc","handleBDec","check","d","Date","now","console","log","startTimer","stopTimer","clearTimeout","setTimeout","currentTime","play","nextState","Grid","container","direction","justify","alignItems","spacing","seconds","minute","Math","floor","toString","second","clock","pause","ref","src","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dfef9ca.chunk.js","sourcesContent":["import {makeStyles} from'@material-ui/core/styles';\r\n\r\nconst useStyles=makeStyles({\r\n    digital: {\r\n        fontFamily:'Orbitron, sans-serif',\r\n        fontSize:'1.5rem',\r\n        color:'antiquewhite',\r\n        margin:'10px 0 10px 0'\r\n    },\r\n    label: {\r\n        fontFamily:'Roboto, sans-serif',\r\n        color:'antiquewhite',\r\n        marginBottom:'10px'\r\n    }\r\n    \r\n});\r\n\r\nexport default useStyles;","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst buttTheme=createMuiTheme({\r\n    palette:{\r\n        primary:{\r\n            light: '#fffcf6',\r\n            main: '#fffaed',\r\n            dark: '#FAEBD7',\r\n            contrastText: '#5a5a5a',\r\n          },\r\n        secondary: {\r\n            light: '#E6E6E6',\r\n            main: '#808080',\r\n            dark: '#5a5a5a',\r\n            contrastText: '#fffaed',\r\n          },  \r\n    }\r\n});\r\n\r\nexport default buttTheme;","import React from 'react';\r\nimport {IconButton, Typography} from '@material-ui/core';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport Box from '@material-ui/core/Box';\r\nimport useTxtStyles from '../hooks/useTxtStyles';\r\nimport buttTheme from '../Themes/buttTheme';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\n//needs from props\r\n//id=string: used for setting id of component elements (therefore must be unique)\r\n//label=string: displayed name of the component\r\n//value=int:displayed value of the component\r\n//handleInc=fn():increment displayed value\r\n//handledec=fn():decrement displayed value\r\nconst Ticker=props=>{  \r\n    const txtClasses=useTxtStyles(props);\r\n    return (\r\n        <Box align=\"center\" margin=\"1rem\">\r\n            <ThemeProvider theme={buttTheme}>\r\n            <Typography id={`${props.id}-label`} className={txtClasses.label}>\r\n                {props.label}\r\n            </Typography>\r\n            <IconButton onClick={props.handleInc}\r\n                id={`${props.id}-increment`}\r\n                color=\"primary\">\r\n                    <ArrowDropUpIcon \r\n                        fontSize='large'/>\r\n            </IconButton>\r\n            <Typography id={`${props.id}-length`} className={txtClasses.digital}>\r\n                {props.value}\r\n            </Typography>\r\n            <IconButton onClick={props.handleDec}\r\n                id={`${props.id}-decrement`}\r\n                color=\"primary\">\r\n                    <ArrowDropDownIcon \r\n                        fontSize='large'/>\r\n            </IconButton>\r\n            </ThemeProvider>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Ticker;","import React from 'react';\r\nimport {Button, Typography} from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport useTxtStyles from '../hooks/useTxtStyles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport buttTheme from '../Themes/buttTheme';\r\n\r\nconst useStyles=makeStyles({\r\n    butt: {\r\n        fontSize:'0.75rem',\r\n        margin:'0 10px 0 10px'\r\n    },\r\n    time: {\r\n        position:'relative',\r\n        margin:'5px auto 15px auto',\r\n        height:'2rem',\r\n        width:'200px'\r\n    },\r\n    inactive: {\r\n        display:'none'\r\n    },\r\n    pulser1: {\r\n        position:'absolute',\r\n        left:'0',\r\n        right:'0',\r\n        top:'-10px',\r\n        marginLeft:'auto',\r\n        marginRight:'auto',\r\n        animation:'pulse1 1s infinite'\r\n    },\r\n    pulser2: {\r\n        position:'absolute',\r\n        left:'0',\r\n        right:'0',\r\n        top:'-10px',\r\n        marginLeft:'auto',\r\n        marginRight:'auto',\r\n        animation:'pulse2 1s infinite'\r\n    },\r\n    pulser3: {\r\n        position:'absolute',\r\n        left:'0',\r\n        right:'0',\r\n        top:'-10px',\r\n        marginLeft:'auto',\r\n        marginRight:'auto',\r\n        animation:'pulse3 1s infinite'\r\n    },\r\n    shifter: {\r\n        animation:'shift 1s infinite'\r\n    }\r\n\r\n});\r\n//needs from props:\r\n//isSesh=boolean:session or break\r\n//isPause=boolean:state of clock\r\n//value=string:time left\r\n//handleTimerAction=fn():start/pause click event\r\n//handleReset=reset whole thing click event\r\nconst Display = props => {\r\n    const classes=useStyles(props);\r\n    const txtClasses=useTxtStyles(props);\r\n    return (\r\n        <Box align=\"center\" id=\"disp\">\r\n            <Typography id=\"timer-label\" className={txtClasses.label}>{props.isSesh?'session':'break'}</Typography>\r\n            <Box className={classes.time}>\r\n                <Typography className={`${(!props.isPause&&props.rawVal<=5)?classes.pulser1:classes.inactive} ${txtClasses.digital}`}>{props.value}</Typography>\r\n                <Typography className={`${(!props.isPause&&props.rawVal<=5)?classes.pulser2:classes.inactive} ${txtClasses.digital}`}>{props.value}</Typography>\r\n                <Typography className={`${(!props.isPause&&props.rawVal<=5)?classes.pulser3:classes.inactive} ${txtClasses.digital}`}>{props.value}</Typography>\r\n                <Typography className={`${(!props.isPause&&props.rawVal<=5)?classes.shifter:''} ${txtClasses.digital}`} id=\"time-left\">{props.value}</Typography>\r\n            </Box>\r\n            <ThemeProvider theme={buttTheme}>\r\n                <Button \r\n                    id=\"start_stop\" \r\n                    onClick={props.handleTimerAction}\r\n                    variant=\"contained\"\r\n                    disableElevation\r\n                    className={classes.butt}\r\n                    color=\"primary\">{props.isPause?'start':'pause'}</Button>\r\n                <Button \r\n                    id=\"reset\" \r\n                    onClick={props.handleReset}\r\n                    variant=\"outlined\"\r\n                    disableElevation\r\n                    className={classes.butt}\r\n                    color=\"primary\">reset</Button>\r\n            </ThemeProvider>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Display;","import { useRef, useEffect } from 'react';\r\n\r\nconst useIsFirstRender = () => {\r\n  const r = useRef(true);\r\n  useEffect(() => {\r\n    r.current = false;\r\n  }, []);\r\n  return r.current;\r\n};\r\n\r\nexport default useIsFirstRender;","import React, {useState,useEffect,useRef} from 'react';\r\nimport Ticker from './components/Ticker';\r\nimport Display from './components/Display';\r\nimport useIsFirstRender from './hooks/useIsFirstRender';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nconst App = () => {\r\n    //session/break lengths (in minutes)\r\n    const [seshVal,setSeshVal]=useState(25);\r\n    const [breakVal,setBreakVal]=useState(5);\r\n\r\n    //session or break, start with a session\r\n    const [isSesh,setIsSesh]=useState(true);\r\n\r\n    //current timer value (in s)\r\n    const [curr,setCurr]=useState(1500);\r\n\r\n    //audio reference\r\n    const audio = useRef(null);\r\n\r\n    //first render state\r\n    const isFR=useIsFirstRender();\r\n\r\n    //for timer\r\n    //expected time lapse: the expected date.now() value when next settimeout is executed\r\n    //the timeout value for next settimeout\r\n    const [timeItems,updateTimeItems]=useState({\r\n        expTimeLapse:0,\r\n        nextUp:1000\r\n    });\r\n    //timeout reference for stopping\r\n    const [timeRef,setTimeRef]=useState(0);\r\n\r\n    //object storing all functions related to changing timer lengths\r\n    const timeChange={\r\n        //increment session length by 1 if is paused and result would not go over 60\r\n        handleSInc:()=>{        \r\n            if (timeItems.expTimeLapse===0 && seshVal+1<=60) \r\n                setSeshVal(seshVal+1);\r\n        },\r\n        //decrement session length by 1 if is paused and result would not go under 0\r\n        handleSDec:()=>{        \r\n            if (timeItems.expTimeLapse===0 && seshVal-1>0) \r\n                setSeshVal(seshVal-1);\r\n        },\r\n        //increment break length by 1 if is paused and result would not go over 60\r\n        handleBInc:()=>{        \r\n            if (timeItems.expTimeLapse===0 && breakVal+1<=60)\r\n                setBreakVal(breakVal+1);\r\n        },\r\n        //decrement break length by 1 if is paused and result would not go under 0\r\n        handleBDec:()=>{        \r\n            if (timeItems.expTimeLapse===0 && breakVal-1>0)\r\n                setBreakVal(breakVal-1);\r\n        }\r\n    }\r\n\r\n    //decrement current function used as callback for check\r\n    const updateCurr=()=>setCurr(curr-1);\r\n\r\n    //when timer running, call every settimeout\r\n    const check=()=>{\r\n        //calculating drift from expected time lapsed\r\n        const d=Date.now()-timeItems.expTimeLapse;\r\n        //if drift is larger than 1 second, \r\n        //consider: immediately run next settimeout to catch up\r\n        //or: stop timer?\r\n        if (d>1000) {\r\n            console.log(d,1000,'skipped time!');\r\n        }\r\n        updateCurr();\r\n        //current solution: immediately run next settimeout to catch up\r\n        //update the list of timer items to new ones\r\n        updateTimeItems({\r\n            expTimeLapse:timeItems.expTimeLapse+1000,\r\n            nextUp:1000>=d?1000-d:0\r\n        });\r\n    }\r\n\r\n    //runs when no timer is running \r\n    //settimeout handled by useeffect\r\n    const startTimer=()=>{\r\n        updateTimeItems({\r\n            expTimeLapse:Date.now()+1000,\r\n            nextUp:1000\r\n        });\r\n    }\r\n\r\n    //stops timer when one is running\r\n    //cleartimeout handled by useeffect\r\n    const stopTimer=()=>{\r\n        updateTimeItems({\r\n            expTimeLapse:0,\r\n            nextUp:1000\r\n        });\r\n    }\r\n\r\n    //checks if to start or pause timer by checking expectd time lapsed value\r\n    const handleTimerAction=()=>{\r\n        if (timeItems.expTimeLapse===0) {\r\n            startTimer();\r\n        }\r\n        else {\r\n            stopTimer();\r\n        }\r\n    };\r\n\r\n    //handles complete reset\r\n    const handleReset=()=>{\r\n        setIsSesh(true);\r\n        setSeshVal(25);\r\n        setBreakVal(5);\r\n        //useeffect would be unreliable since timer on default setting being reset would not trigger it\r\n        setCurr(1500);\r\n        //cleartimeout handled by useeffect\r\n        stopTimer();\r\n        //stop alarm if playing\r\n        audio.current.pause();\r\n        audio.current.currentTime=0;\r\n    }\r\n\r\n    //turns curr timer value (in seconds) to \"XX:XX\" for display\r\n    const clock=seconds=>{\r\n        const minute=Math.floor(seconds/60).toString();\r\n        const second=(seconds%60).toString();\r\n        //add leading zero to minute/second value if not two digits\r\n        return (minute<10?`0${minute}`:minute)+':'+(second<10?`0${second}`:second);\r\n    };\r\n\r\n    //when timer items changes:\r\n    //if expected time lapsed is 0, means timer is now paused, respond by clear running timer and resetting the timeout reference\r\n    //else the next settimeout should be set to check against new expected time lapsed, respond by settimeout\r\n    useEffect(()=>{\r\n        if (isFR)\r\n            return;\r\n        if (timeItems.expTimeLapse===0) {\r\n            clearTimeout(timeRef);\r\n            setTimeRef(0);\r\n        }\r\n        else {\r\n            setTimeRef(setTimeout(check,timeItems.nextUp));\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[timeItems]);\r\n\r\n    //when session value changes, check if necessary to change curr timer value\r\n    useEffect(()=>{\r\n        if (isFR)\r\n            return;\r\n        console.log('seshval.breakval,issesh state change triggered useeffect');\r\n        console.log(`issesh ${isSesh}, seshVal ${seshVal}, breakVal ${breakVal}, curr ${curr}`);\r\n        if (isSesh)\r\n            setCurr(seshVal*60);\r\n        else\r\n            setCurr(breakVal*60);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[seshVal,breakVal]);\r\n\r\n    //in charge of what to do when curr passes certain threshold\r\n    useEffect(()=>{\r\n        //5 seconds left, play blinking animation\r\n        if (curr===5) {\r\n            console.log('animation');\r\n        }\r\n        //timers up, play alarm\r\n        else if (curr===0) {\r\n            audio.current.currentTime=0;\r\n            audio.current.play();\r\n        }\r\n        //last second up, swap timer phase\r\n        else if (curr<0) {\r\n            const nextState=!isSesh;\r\n            stopTimer();\r\n            setIsSesh(nextState);\r\n            setCurr(nextState?seshVal*60:breakVal*60);\r\n            startTimer();\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[curr]);\r\n\r\n    return (\r\n        <Box height=\"100%\" width=\"100%\" id=\"bg\">\r\n        <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                spacing={0}\r\n                id=\"app\">\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                id=\"ctrl\">\r\n                <Ticker id='session' \r\n                    label='session'\r\n                    value={seshVal}\r\n                    handleInc={timeChange.handleSInc}\r\n                    handleDec={timeChange.handleSDec}/>\r\n                <Ticker id='break' \r\n                    label='break'\r\n                    value={breakVal}\r\n                    handleInc={timeChange.handleBInc}\r\n                    handleDec={timeChange.handleBDec}/>\r\n            </Grid>\r\n            <Display isSesh={isSesh}\r\n                isPause={timeItems.expTimeLapse===0}\r\n                value={clock(curr)}\r\n                rawVal={curr}\r\n                handleTimerAction={handleTimerAction}\r\n                handleReset={handleReset} />\r\n            <audio \r\n                className=\"alarmSound\" \r\n                id=\"beep\" \r\n                ref={audio}\r\n                src=\"https://github.com/MatchaCrisp/pomodoro/blob/main/src/alarms/neverIntro.mp3?raw=true\" />\r\n        </Grid>\r\n        </Box>\r\n    )\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}